// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/workceptor/kubernetes.go

// Package mock_workceptor is a generated GoMock package.
package mock_workceptor

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/core/v1"
	errors "k8s.io/apimachinery/pkg/api/errors"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	fields "k8s.io/apimachinery/pkg/fields"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	watch "k8s.io/apimachinery/pkg/watch"
	kubernetes "k8s.io/client-go/kubernetes"
	rest "k8s.io/client-go/rest"
	cache "k8s.io/client-go/tools/cache"
	clientcmd "k8s.io/client-go/tools/clientcmd"
	remotecommand "k8s.io/client-go/tools/remotecommand"
	watch0 "k8s.io/client-go/tools/watch"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
	url "net/url"
	reflect "reflect"
)

// MockKubeAPIer is a mock of KubeAPIer interface
type MockKubeAPIer struct {
	ctrl     *gomock.Controller
	recorder *MockKubeAPIerMockRecorder
}

// MockKubeAPIerMockRecorder is the mock recorder for MockKubeAPIer
type MockKubeAPIerMockRecorder struct {
	mock *MockKubeAPIer
}

// NewMockKubeAPIer creates a new mock instance
func NewMockKubeAPIer(ctrl *gomock.Controller) *MockKubeAPIer {
	mock := &MockKubeAPIer{ctrl: ctrl}
	mock.recorder = &MockKubeAPIerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKubeAPIer) EXPECT() *MockKubeAPIerMockRecorder {
	return m.recorder
}

// NewNotFound mocks base method
func (m *MockKubeAPIer) NewNotFound(qualifiedResource schema.GroupResource, name string) *errors.StatusError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNotFound", qualifiedResource, name)
	ret0, _ := ret[0].(*errors.StatusError)
	return ret0
}

// NewNotFound indicates an expected call of NewNotFound
func (mr *MockKubeAPIerMockRecorder) NewNotFound(qualifiedResource, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNotFound", reflect.TypeOf((*MockKubeAPIer)(nil).NewNotFound), qualifiedResource, name)
}

// OneTermEqualSelector mocks base method
func (m *MockKubeAPIer) OneTermEqualSelector(k, v string) fields.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneTermEqualSelector", k, v)
	ret0, _ := ret[0].(fields.Selector)
	return ret0
}

// OneTermEqualSelector indicates an expected call of OneTermEqualSelector
func (mr *MockKubeAPIerMockRecorder) OneTermEqualSelector(k, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneTermEqualSelector", reflect.TypeOf((*MockKubeAPIer)(nil).OneTermEqualSelector), k, v)
}

// NewForConfig mocks base method
func (m *MockKubeAPIer) NewForConfig(c *rest.Config) (*kubernetes.Clientset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewForConfig", c)
	ret0, _ := ret[0].(*kubernetes.Clientset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewForConfig indicates an expected call of NewForConfig
func (mr *MockKubeAPIerMockRecorder) NewForConfig(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewForConfig", reflect.TypeOf((*MockKubeAPIer)(nil).NewForConfig), c)
}

// GetLogs mocks base method
func (m *MockKubeAPIer) GetLogs(clientset *kubernetes.Clientset, namespace, name string, opts *v1.PodLogOptions) *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", clientset, namespace, name, opts)
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// GetLogs indicates an expected call of GetLogs
func (mr *MockKubeAPIerMockRecorder) GetLogs(clientset, namespace, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockKubeAPIer)(nil).GetLogs), clientset, namespace, name, opts)
}

// Get mocks base method
func (m *MockKubeAPIer) Get(clientset *kubernetes.Clientset, namespace string, ctx context.Context, name string, opts v10.GetOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", clientset, namespace, ctx, name, opts)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKubeAPIerMockRecorder) Get(clientset, namespace, ctx, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKubeAPIer)(nil).Get), clientset, namespace, ctx, name, opts)
}

// Create mocks base method
func (m *MockKubeAPIer) Create(clientset *kubernetes.Clientset, namespace string, ctx context.Context, pod *v1.Pod, opts v10.CreateOptions) (*v1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", clientset, namespace, ctx, pod, opts)
	ret0, _ := ret[0].(*v1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockKubeAPIerMockRecorder) Create(clientset, namespace, ctx, pod, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockKubeAPIer)(nil).Create), clientset, namespace, ctx, pod, opts)
}

// List mocks base method
func (m *MockKubeAPIer) List(clientset *kubernetes.Clientset, namespace string, ctx context.Context, opts v10.ListOptions) (*v1.PodList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", clientset, namespace, ctx, opts)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockKubeAPIerMockRecorder) List(clientset, namespace, ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKubeAPIer)(nil).List), clientset, namespace, ctx, opts)
}

// Watch mocks base method
func (m *MockKubeAPIer) Watch(clientset *kubernetes.Clientset, namespace string, ctx context.Context, opts v10.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", clientset, namespace, ctx, opts)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockKubeAPIerMockRecorder) Watch(clientset, namespace, ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockKubeAPIer)(nil).Watch), clientset, namespace, ctx, opts)
}

// Delete mocks base method
func (m *MockKubeAPIer) Delete(clientset *kubernetes.Clientset, namespace string, ctx context.Context, name string, opts v10.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", clientset, namespace, ctx, name, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockKubeAPIerMockRecorder) Delete(clientset, namespace, ctx, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKubeAPIer)(nil).Delete), clientset, namespace, ctx, name, opts)
}

// SubResource mocks base method
func (m *MockKubeAPIer) SubResource(clientset *kubernetes.Clientset, podName, podNamespace string) *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubResource", clientset, podName, podNamespace)
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// SubResource indicates an expected call of SubResource
func (mr *MockKubeAPIerMockRecorder) SubResource(clientset, podName, podNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubResource", reflect.TypeOf((*MockKubeAPIer)(nil).SubResource), clientset, podName, podNamespace)
}

// InClusterConfig mocks base method
func (m *MockKubeAPIer) InClusterConfig() (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InClusterConfig")
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InClusterConfig indicates an expected call of InClusterConfig
func (mr *MockKubeAPIerMockRecorder) InClusterConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InClusterConfig", reflect.TypeOf((*MockKubeAPIer)(nil).InClusterConfig))
}

// NewDefaultClientConfigLoadingRules mocks base method
func (m *MockKubeAPIer) NewDefaultClientConfigLoadingRules() *clientcmd.ClientConfigLoadingRules {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDefaultClientConfigLoadingRules")
	ret0, _ := ret[0].(*clientcmd.ClientConfigLoadingRules)
	return ret0
}

// NewDefaultClientConfigLoadingRules indicates an expected call of NewDefaultClientConfigLoadingRules
func (mr *MockKubeAPIerMockRecorder) NewDefaultClientConfigLoadingRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDefaultClientConfigLoadingRules", reflect.TypeOf((*MockKubeAPIer)(nil).NewDefaultClientConfigLoadingRules))
}

// BuildConfigFromFlags mocks base method
func (m *MockKubeAPIer) BuildConfigFromFlags(masterUrl, kubeconfigPath string) (*rest.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildConfigFromFlags", masterUrl, kubeconfigPath)
	ret0, _ := ret[0].(*rest.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildConfigFromFlags indicates an expected call of BuildConfigFromFlags
func (mr *MockKubeAPIerMockRecorder) BuildConfigFromFlags(masterUrl, kubeconfigPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildConfigFromFlags", reflect.TypeOf((*MockKubeAPIer)(nil).BuildConfigFromFlags), masterUrl, kubeconfigPath)
}

// NewClientConfigFromBytes mocks base method
func (m *MockKubeAPIer) NewClientConfigFromBytes(configBytes []byte) (clientcmd.ClientConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewClientConfigFromBytes", configBytes)
	ret0, _ := ret[0].(clientcmd.ClientConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewClientConfigFromBytes indicates an expected call of NewClientConfigFromBytes
func (mr *MockKubeAPIerMockRecorder) NewClientConfigFromBytes(configBytes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewClientConfigFromBytes", reflect.TypeOf((*MockKubeAPIer)(nil).NewClientConfigFromBytes), configBytes)
}

// NewSPDYExecutor mocks base method
func (m *MockKubeAPIer) NewSPDYExecutor(config *rest.Config, method string, url *url.URL) (remotecommand.Executor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSPDYExecutor", config, method, url)
	ret0, _ := ret[0].(remotecommand.Executor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSPDYExecutor indicates an expected call of NewSPDYExecutor
func (mr *MockKubeAPIerMockRecorder) NewSPDYExecutor(config, method, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSPDYExecutor", reflect.TypeOf((*MockKubeAPIer)(nil).NewSPDYExecutor), config, method, url)
}

// StreamWithContext mocks base method
func (m *MockKubeAPIer) StreamWithContext(exec remotecommand.Executor, ctx context.Context, options remotecommand.StreamOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamWithContext", exec, ctx, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamWithContext indicates an expected call of StreamWithContext
func (mr *MockKubeAPIerMockRecorder) StreamWithContext(exec, ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamWithContext", reflect.TypeOf((*MockKubeAPIer)(nil).StreamWithContext), exec, ctx, options)
}

// UntilWithSync mocks base method
func (m *MockKubeAPIer) UntilWithSync(ctx context.Context, lw cache.ListerWatcher, objType runtime.Object, precondition watch0.PreconditionFunc, conditions ...watch0.ConditionFunc) (*watch.Event, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, lw, objType, precondition}
	for _, a := range conditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UntilWithSync", varargs...)
	ret0, _ := ret[0].(*watch.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntilWithSync indicates an expected call of UntilWithSync
func (mr *MockKubeAPIerMockRecorder) UntilWithSync(ctx, lw, objType, precondition interface{}, conditions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, lw, objType, precondition}, conditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntilWithSync", reflect.TypeOf((*MockKubeAPIer)(nil).UntilWithSync), varargs...)
}

// NewFakeNeverRateLimiter mocks base method
func (m *MockKubeAPIer) NewFakeNeverRateLimiter() flowcontrol.RateLimiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFakeNeverRateLimiter")
	ret0, _ := ret[0].(flowcontrol.RateLimiter)
	return ret0
}

// NewFakeNeverRateLimiter indicates an expected call of NewFakeNeverRateLimiter
func (mr *MockKubeAPIerMockRecorder) NewFakeNeverRateLimiter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFakeNeverRateLimiter", reflect.TypeOf((*MockKubeAPIer)(nil).NewFakeNeverRateLimiter))
}

// NewFakeAlwaysRateLimiter mocks base method
func (m *MockKubeAPIer) NewFakeAlwaysRateLimiter() flowcontrol.RateLimiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFakeAlwaysRateLimiter")
	ret0, _ := ret[0].(flowcontrol.RateLimiter)
	return ret0
}

// NewFakeAlwaysRateLimiter indicates an expected call of NewFakeAlwaysRateLimiter
func (mr *MockKubeAPIerMockRecorder) NewFakeAlwaysRateLimiter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFakeAlwaysRateLimiter", reflect.TypeOf((*MockKubeAPIer)(nil).NewFakeAlwaysRateLimiter))
}
