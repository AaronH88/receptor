// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/workceptor/workunitbase.go

// Package mock_workceptor is a generated GoMock package.
package mock_workceptor

import (
	workceptor "github.com/ansible/receptor/pkg/workceptor"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFileWriter is a mock of FileWriter interface
type MockFileWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFileWriterMockRecorder
}

// MockFileWriterMockRecorder is the mock recorder for MockFileWriter
type MockFileWriterMockRecorder struct {
	mock *MockFileWriter
}

// NewMockFileWriter creates a new mock instance
func NewMockFileWriter(ctrl *gomock.Controller) *MockFileWriter {
	mock := &MockFileWriter{ctrl: ctrl}
	mock.recorder = &MockFileWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileWriter) EXPECT() *MockFileWriterMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *MockFileWriter) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockFileWriterMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockFileWriter)(nil).Write), p)
}

// MockFileReader is a mock of FileReader interface
type MockFileReader struct {
	ctrl     *gomock.Controller
	recorder *MockFileReaderMockRecorder
}

// MockFileReaderMockRecorder is the mock recorder for MockFileReader
type MockFileReaderMockRecorder struct {
	mock *MockFileReader
}

// NewMockFileReader creates a new mock instance
func NewMockFileReader(ctrl *gomock.Controller) *MockFileReader {
	mock := &MockFileReader{ctrl: ctrl}
	mock.recorder = &MockFileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileReader) EXPECT() *MockFileReaderMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockFileReader) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockFileReaderMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockFileReader)(nil).Read), p)
}

// MockStatusFileDataer is a mock of StatusFileDataer interface
type MockStatusFileDataer struct {
	ctrl     *gomock.Controller
	recorder *MockStatusFileDataerMockRecorder
}

// MockStatusFileDataerMockRecorder is the mock recorder for MockStatusFileDataer
type MockStatusFileDataerMockRecorder struct {
	mock *MockStatusFileDataer
}

// NewMockStatusFileDataer creates a new mock instance
func NewMockStatusFileDataer(ctrl *gomock.Controller) *MockStatusFileDataer {
	mock := &MockStatusFileDataer{ctrl: ctrl}
	mock.recorder = &MockStatusFileDataerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStatusFileDataer) EXPECT() *MockStatusFileDataerMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockStatusFileDataer) Save(filename string, fs workceptor.FileSystemer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", filename, fs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockStatusFileDataerMockRecorder) Save(filename, fs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStatusFileDataer)(nil).Save), filename, fs)
}

// Load mocks base method
func (m *MockStatusFileDataer) Load(filename string, fs workceptor.FileSystemer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", filename, fs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load
func (mr *MockStatusFileDataerMockRecorder) Load(filename, fs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStatusFileDataer)(nil).Load), filename, fs)
}

// UpdateFullStatus mocks base method
func (m *MockStatusFileDataer) UpdateFullStatus(filename string, fs workceptor.FileSystemer, statusFunc func(*workceptor.StatusFileData)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFullStatus", filename, fs, statusFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFullStatus indicates an expected call of UpdateFullStatus
func (mr *MockStatusFileDataerMockRecorder) UpdateFullStatus(filename, fs, statusFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFullStatus", reflect.TypeOf((*MockStatusFileDataer)(nil).UpdateFullStatus), filename, fs, statusFunc)
}

// UpdateBasicStatus mocks base method
func (m *MockStatusFileDataer) UpdateBasicStatus(filename string, state int, detail string, stdoutSize int64, fs workceptor.FileSystemer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBasicStatus", filename, state, detail, stdoutSize, fs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBasicStatus indicates an expected call of UpdateBasicStatus
func (mr *MockStatusFileDataerMockRecorder) UpdateBasicStatus(filename, state, detail, stdoutSize, fs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBasicStatus", reflect.TypeOf((*MockStatusFileDataer)(nil).UpdateBasicStatus), filename, state, detail, stdoutSize, fs)
}

// GetStatus mocks base method
func (m *MockStatusFileDataer) GetStatus() *workceptor.StatusFileData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(*workceptor.StatusFileData)
	return ret0
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockStatusFileDataerMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockStatusFileDataer)(nil).GetStatus))
}

// GetExtraData mocks base method
func (m *MockStatusFileDataer) GetExtraData() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtraData")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetExtraData indicates an expected call of GetExtraData
func (mr *MockStatusFileDataerMockRecorder) GetExtraData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtraData", reflect.TypeOf((*MockStatusFileDataer)(nil).GetExtraData))
}

// SetExtraData mocks base method
func (m *MockStatusFileDataer) SetExtraData(data interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExtraData", data)
}

// SetExtraData indicates an expected call of SetExtraData
func (mr *MockStatusFileDataerMockRecorder) SetExtraData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtraData", reflect.TypeOf((*MockStatusFileDataer)(nil).SetExtraData), data)
}
